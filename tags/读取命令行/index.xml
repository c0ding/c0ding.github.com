<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读取命令行 on 逸阳</title>
    <link>https://c0ding.github.io/tags/%E8%AF%BB%E5%8F%96%E5%91%BD%E4%BB%A4%E8%A1%8C/</link>
    <description>Recent content in 读取命令行 on 逸阳</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 04 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://c0ding.github.io/tags/%E8%AF%BB%E5%8F%96%E5%91%BD%E4%BB%A4%E8%A1%8C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 读取命令行参数的3种方式</title>
      <link>https://c0ding.github.io/archive/go-1/</link>
      <pubDate>Tue, 04 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://c0ding.github.io/archive/go-1/</guid>
      <description>对于初学者，想要尽快熟练掌握go语言，那就要大量的刻意练习，多以实践的方式为主。
 今天为大家推荐的刻意练习是：编写一个简单的数学计算器，读取命令行参数进行运算。如此既可以熟练语言，也为开发命令行应用起到入门效果。
本篇使用3种方式来读取命令行：  内置 os 包读取命令参数
 内置 flag 包读取命令参数
 cli 框架读取命令参数 比较流行
  题目分析 实现 “简单数学计算” 这个功能，读取命令行参数：比如 go run main.go add 1 2
除文件名之外的第一个元素：解析为进行数学运算符，比如： add、sub、mul、sqrt。
其余参数表示：进行操作的数值。
1. OS 获取命令行参数 os包基本使用
# 1.接受的参数，是一个切片类型 os.Args # 2.将字符串数值转换为整型 strconv.Atoi # 3.整型转换为字符串 strconv.Itoa # 4.将字符串数值转换为浮点型 strconv.ParseFloat  实现代码 注意参与运算前先过滤异常情况，如参数的合法性、类型转换
func CalcByOs() error { args := os.Args // 获取参数列表 if len(args) &amp;lt; 3 || args == nil { //过滤 异常情况，提示 help() return nil } operate := args[1] // 获取运算符 switch operate { case &amp;quot;add&amp;quot;:{ rt := 0 number_one, err1 := strconv.</description>
    </item>
    
  </channel>
</rss>